{
    "projects": [
        {
            "title": "Drone Simulation",
            "description": [
                "Built a multi-entity simulator in C++ using Composite Factory",
                "Extended functionality of entities using the Decorator pattern",
                "Implemented the Observer pattern for real-time notifications, sending JSON events to TypeScript front end",
                "Containerized the environment with Docker for uniform builds and deployments",
                "Employed CI/CD pipelines to automate testing and deployment",
                "Practiced Scrum and used Git for collaborative development and version control"
            ],
            "technologies": [
                "C++",
                "TypeScript",
                "Docker",
                "Docker Compose",
                "CI/CD",
                "Git"
            ],
            "links": [
                {
                    "text": "Read Docs",
                    "url": "https://docs.hongzhengli.com/drone-simulation/classes.html"
                },
                {
                    "text": "Play with it",
                    "url": "https://drone.hongzhengli.com"
                },
                {
                    "text": "View Source Code",
                    "url": "https://git.hongzhengli.com/Drone_Simulation"
                },
                {
                    "text": "Deploy it now!",
                    "url": "https://github.com/HongzhengL/drone-simulation"
                }
            ],
            "image": "assets/images/Drone_Simulation_UI.png"
        },
        {
            "title": "Distributed Address Lookup System",
            "description": [
                "Built a multi-container application with gRPC and Flask for address lookups in Madison, WI",
                "Implemented LRU caching and load-balanced gRPC requests for performance optimization",
                "Used Docker and Docker Compose for consistent, containerized deployment",
                "Added retry logic and server replication to handle failures gracefully"
            ],
            "technologies": [
                "Python",
                "gRPC",
                "Flask",
                "Docker",
                "Docker Compose"
            ],
            "links": [
                {
                    "text": "View Source Code",
                    "url": "https://git.hongzhengli.com/CS544/proj-2/~files"
                }
            ],
            "image": "assets/images/look_up_system.png"
        },
        {
            "title": "xv6 Transparent Huge Page Support",
            "description": [
                "Extended xv6 kernel to support 4MB huge page allocations via custom physical allocator (khugealloc, khugefree)",
                "Developed user-level vmalloc/vfree supporting base or huge pages with robust error handling and input validation",
                "Added transparent huge page support (THP) to malloc() using size-based heuristics (1MB threshold)",
                "Created system calls (setthp, procpgdirinfo, printhugpde) for controlling and debugging THP allocation",
                "Addressed edge cases like invalid remapping and page boundary overflows through iterative debugging",
                "Managed development across multiple branches with CI configuration, merging, and cleanup"
            ],
            "technologies": [
                "C",
                "Git",
                "CI/CD"
            ],
            "links": [
                {
                    "text": "View Source Code",
                    "url": "https://github.com/HongzhengL/xv6-thp"
                }
            ],
            "image": "assets/images/xv6-thp.png"
        }
    ]
}